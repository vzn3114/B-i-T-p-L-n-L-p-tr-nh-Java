import React, { useState } from "react";
import "../../static/assets/Staff.css";
import { Link } from "react-router-dom";

const Staff = () => {
  const [selectedDoctor, setSelectedDoctor] = useState(null);
  const [showAppointmentModal, setShowAppointmentModal] = useState(false);
  const [selectedDoctorForAppointment, setSelectedDoctorForAppointment] =
    useState(null);
  const [appointmentData, setAppointmentData] = useState({
    patientName: "",
    patientPhone: "",
    patientAddress: "",
    appointmentDate: "",
    appointmentTime: "",
    patientNote: "",
  });

  const doctors = [
    {
      id: 1,
      name: "BS.CKII Nguy·ªÖn Th·ªã Minh H∆∞∆°ng",
      image: "/images/doctors/bac-si.jpg",
      specialty: "Tr∆∞·ªüng khoa H·ªó tr·ª£ sinh s·∫£n - 15 nƒÉm kinh nghi·ªám",
      achievements: [
        "T·ª∑ l·ªá th√†nh c√¥ng IVF 65% - cao nh·∫•t trong khu v·ª±c",
        "Th·ª±c hi·ªán th√†nh c√¥ng h∆°n 2000 ca IVF",
        "Ch·ª©ng ch·ªâ chuy√™n gia sinh s·∫£n qu·ªëc t·∫ø",
        "T√°c gi·∫£ 25 b√†i b√°o khoa h·ªçc v·ªÅ h·ªó tr·ª£ sinh s·∫£n",
        "Gi·∫£ng vi√™n th·ªânh gi·∫£ng t·∫°i ƒê·∫°i h·ªçc Y H√† N·ªôi",
      ],
    },
    {
      id: 2,
      name: "BS.CKI Tr·∫ßn VƒÉn ƒê·ª©c",
      image: "/images/doctors/bac-si.jpg",
      specialty: "B√°c sƒ© chuy√™n khoa Nam h·ªçc - 12 nƒÉm kinh nghi·ªám",
      achievements: [
        "Chuy√™n gia h√†ng ƒë·∫ßu v·ªÅ v√¥ sinh nam",
        "Nghi√™n c·ª©u ch·∫•t l∆∞·ª£ng tinh tr√πng ti√™n ti·∫øn",
        "Th√†nh vi√™n H·ªôi Nam h·ªçc Vi·ªát Nam",
        "ƒêi·ªÅu tr·ªã th√†nh c√¥ng 1500+ ca v√¥ sinh nam",
        "Ch·ª©ng ch·ªâ chuy√™n s√¢u v·ªÅ vi ph·∫´u thu·∫≠t nam khoa",
      ],
    },
    {
      id: 3,
      name: "BS.CKII L√™ Th·ªã Lan Anh",
      image: "/images/doctors/bac-si.jpg",
      specialty: "Ph√≥ tr∆∞·ªüng khoa S·∫£n ph·ª• khoa - 18 nƒÉm kinh nghi·ªám",
      achievements: [
        "Chuy√™n gia si√™u √¢m h√†ng ƒë·∫ßu",
        "T·ª∑ l·ªá th√†nh c√¥ng IUI 40%",
        "Th·ª±c hi·ªán 3000+ ca si√™u √¢m ch·∫©n ƒëo√°n",
        "Gi·∫£i th∆∞·ªüng b√°c sƒ© xu·∫•t s·∫Øc nƒÉm 2023",
        "Ch·ª©ng ch·ªâ chuy√™n gia si√™u √¢m 4D qu·ªëc t·∫ø",
      ],
    },
    {
      id: 4,
      name: "BS.CKI Ph·∫°m Minh Tu·∫•n",
      image: "/images/doctors/bac-si.jpg",
      specialty: "B√°c sƒ© chuy√™n khoa Ph·∫´u thu·∫≠t - 10 nƒÉm kinh nghi·ªám",
      achievements: [
        "Chuy√™n gia ph·∫´u thu·∫≠t n·ªôi soi",
        "ƒêi·ªÅu tr·ªã l·∫°c n·ªôi m·∫°c t·ª≠ cung hi·ªáu qu·∫£",
        "Th·ª±c hi·ªán 800+ ca ph·∫´u thu·∫≠t n·ªôi soi",
        "Ch·ª©ng ch·ªâ ph·∫´u thu·∫≠t n·ªôi soi ch√¢u √Çu",
        "T·ª∑ l·ªá th√†nh c√¥ng ph·∫´u thu·∫≠t 95%",
      ],
    },
  ];

  const handleViewDetails = (doctor) => {
    setSelectedDoctor(doctor);
  };

  const handleCloseModal = () => {
    setSelectedDoctor(null);
    setShowAppointmentModal(false);
    setSelectedDoctorForAppointment(null);
  };
  const handleAppointmentClick = (doctor) => {
    setSelectedDoctorForAppointment(doctor);
    setShowAppointmentModal(true);
    // Reset form data
    setAppointmentData({
      patientName: "",
      patientPhone: "",
      patientAddress: "",
      appointmentDate: "",
      appointmentTime: "",
      patientNote: "",
    });
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setAppointmentData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmitAppointment = (e) => {
    e.preventDefault();

    // Validation
    if (
      !appointmentData.patientName ||
      !appointmentData.patientPhone ||
      !appointmentData.appointmentDate
    ) {
      alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!");
      return;
    }

    const submissionData = {
      ...appointmentData,
      doctorId: selectedDoctorForAppointment.id,
      doctorName: selectedDoctorForAppointment.name,
      createdAt: new Date().toISOString(),
    };

    // Log d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra
    console.log("Appointment Data:", submissionData);

    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    alert(
      `ƒê·∫∑t l·ªãch h·∫πn th√†nh c√¥ng v·ªõi ${selectedDoctorForAppointment.name}!\nCh√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t.`
    );

    // ƒê√≥ng modal
    handleCloseModal();
  };

  // L·∫•y th·ªùi gian th·ª±c ƒë·ªÉ set minimum date
  const today = new Date().toISOString().split("T")[0];

  return (
    <div className="staff-container">
      <section className="staff-intro">
        <h2>ƒê·ªôi Ng≈© B√°c Sƒ©</h2>
        <p>
          ƒê·ªôi ng≈© b√°c sƒ© gi√†u kinh nghi·ªám, t·∫≠n t√¢m v√† chuy√™n nghi·ªáp, lu√¥n ƒë·ªìng
          h√†nh c√πng c√°c c·∫∑p v·ª£ ch·ªìng tr√™n h√†nh tr√¨nh t√¨m con.
        </p>
      </section>

      <section className="staffs-preview">
        <div className="staffs-list">
          {doctors.map((doctor) => (
            <div key={doctor.id} className="staff-card">
              <div className="staff-image">
                <img src={doctor.image} alt={doctor.name} />
              </div>
              <h3>{doctor.name}</h3>
              <p className="staff-specialty">{doctor.specialty}</p>
              <button
                className="view-details-btn"
                onClick={() => handleViewDetails(doctor)}
              >
                Xem chi ti·∫øt
              </button>
              <button
                className="appointment-btn"
                onClick={() => handleAppointmentClick(doctor)}
              >
                ƒê·∫∑t L·ªãch H·∫πn
              </button>
            </div>
          ))}
        </div>
      </section>

      <section className="commitment-preview">
        <h2>Cam k·∫øt c·ªßa ch√∫ng t√¥i</h2>
        <ol>
          <li>üéØ Chuy√™n nghi·ªáp - √Åp d·ª•ng k·ªπ thu·∫≠t ti√™n ti·∫øn nh·∫•t</li>
          <li>‚ù§Ô∏è T·∫≠n t√¢m - ƒê·ªìng h√†nh su·ªët qu√° tr√¨nh ƒëi·ªÅu tr·ªã</li>
          <li>üèÜ Hi·ªáu qu·∫£ - T·ª∑ l·ªá th√†nh c√¥ng cao v·ªõi chi ph√≠ h·ª£p l√Ω</li>
          <li>ü§ù Tin c·∫≠y - Minh b·∫°ch quy tr√¨nh v√† chi ph√≠</li>
        </ol>
      </section>

      {/* Modal hi·ªÉn th·ªã chi ti·∫øt b√°c sƒ© */}
      {selectedDoctor && (
        <div className="modal-overlay" onClick={handleCloseModal}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <button className="close-btn" onClick={handleCloseModal}>
              √ó
            </button>
            <div className="modal-header">
              <img src={selectedDoctor.image} alt={selectedDoctor.name} />
              <h2>{selectedDoctor.name}</h2>
              <p className="modal-specialty">{selectedDoctor.specialty}</p>
            </div>
            <div className="modal-body">
              <h3>Th√†nh t·ª±u n·ªïi b·∫≠t:</h3>
              <ul className="achievements-list">
                {selectedDoctor.achievements.map((achievement, index) => (
                  <li key={index}>{achievement}</li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )}

      {/* Modal ƒë·∫∑t l·ªãch h·∫πn */}
      {showAppointmentModal && selectedDoctorForAppointment && (
        <div className="modal-overlay" onClick={handleCloseModal}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <button className="close-btn" onClick={handleCloseModal}>
              √ó
            </button>
            <div className="appointment-form">
              <h3>ƒê·∫∑t L·ªãch H·∫πn v·ªõi {selectedDoctorForAppointment.name}</h3>
              <form onSubmit={handleSubmitAppointment}>
                <div className="form-group">
                  <label htmlFor="patientName">H·ªç t√™n *</label>
                  <input
                    type="text"
                    id="patientName"
                    name="patientName"
                    value={appointmentData.patientName}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label htmlFor="patientPhone">ƒêi·ªán tho·∫°i *</label>
                  <input
                    type="tel"
                    id="patientPhone"
                    name="patientPhone"
                    value={appointmentData.patientPhone}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                <div className="form-group">
                  <label htmlFor="patientAddress">ƒê·ªãa ch·ªâ</label>
                  <input
                    type="text"
                    id="patientAddress"
                    name="patientAddress"
                    value={appointmentData.patientAddress}
                    onChange={handleInputChange}
                  />
                </div>
                <div className="form-group">
                  <label htmlFor="appointmentDate">Ng√†y kh√°m mong mu·ªën *</label>
                  <input
                    type="date"
                    id="appointmentDate"
                    name="appointmentDate"
                    value={appointmentData.appointmentDate}
                    onChange={handleInputChange}
                    min={today}
                    required
                  />
                </div>
                <div className="form-group">
                  <label htmlFor="appointmentTime">Gi·ªù kh√°m mong mu·ªën</label>
                  <select
                    id="appointmentTime"
                    name="appointmentTime"
                    value={appointmentData.appointmentTime}
                    onChange={handleInputChange}
                  >
                    <option value="">Ch·ªçn gi·ªù</option>
                    <option value="08:00">08:00</option>
                    <option value="09:00">09:00</option>
                    <option value="10:00">10:00</option>
                    <option value="11:00">11:00</option>
                    <option value="14:00">14:00</option>
                    <option value="15:00">15:00</option>
                    <option value="16:00">16:00</option>
                    <option value="17:00">17:00</option>
                  </select>
                </div>
                <div className="form-group">
                  <label htmlFor="patientNote">
                    Nhu c·∫ßu kh√°m b·ªánh (kh√¥ng b·∫Øt bu·ªôc)
                  </label>
                  <textarea
                    id="patientNote"
                    name="patientNote"
                    value={appointmentData.patientNote}
                    onChange={handleInputChange}
                    placeholder="M√¥ t·∫£ tri·ªáu ch·ª©ng ho·∫∑c nhu c·∫ßu kh√°m..."
                  />
                </div>
                <div className="form-buttons">
                  <button type="submit" className="submit-btn">
                    ƒê·∫∑t L·ªãch H·∫πn
                  </button>
                  <button
                    type="button"
                    className="cancel-btn"
                    onClick={handleCloseModal}
                  >
                    H·ªßy
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Staff;
